// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// - Remark: HTTP `PUT /auth/signup`.
    /// - Remark: Generated from `#/paths//auth/signup/put(signup)`.
    func signup(_ input: Operations.Signup.Input) async throws -> Operations.Signup.Output
    /// - Remark: HTTP `PUT /auth/login`.
    /// - Remark: Generated from `#/paths//auth/login/put(login)`.
    func login(_ input: Operations.Login.Input) async throws -> Operations.Login.Output
    /// - Remark: HTTP `PUT /auth/refresh`.
    /// - Remark: Generated from `#/paths//auth/refresh/put(refreshSession)`.
    func refreshSession(_ input: Operations.RefreshSession.Input) async throws -> Operations.RefreshSession.Output
    /// - Remark: HTTP `PUT /auth/updateEmail`.
    /// - Remark: Generated from `#/paths//auth/updateEmail/put(updateEmail)`.
    func updateEmail(_ input: Operations.UpdateEmail.Input) async throws -> Operations.UpdateEmail.Output
    /// - Remark: HTTP `PUT /auth/updatePassword`.
    /// - Remark: Generated from `#/paths//auth/updatePassword/put(updatePassword)`.
    func updatePassword(_ input: Operations.UpdatePassword.Input) async throws -> Operations.UpdatePassword.Output
    /// - Remark: HTTP `PUT /auth/registerForPushNotifications`.
    /// - Remark: Generated from `#/paths//auth/registerForPushNotifications/put(registerForPushNotifications)`.
    func registerForPushNotifications(_ input: Operations.RegisterForPushNotifications.Input) async throws -> Operations.RegisterForPushNotifications.Output
    /// - Remark: HTTP `GET /avatars/get`.
    /// - Remark: Generated from `#/paths//avatars/get/get(getAvatars)`.
    func getAvatars(_ input: Operations.GetAvatars.Input) async throws -> Operations.GetAvatars.Output
    /// - Remark: HTTP `GET /users/search`.
    /// - Remark: Generated from `#/paths//users/search/get(searchUsers)`.
    func searchUsers(_ input: Operations.SearchUsers.Input) async throws -> Operations.SearchUsers.Output
    /// - Remark: HTTP `PUT /verification/confirmEmail`.
    /// - Remark: Generated from `#/paths//verification/confirmEmail/put(confirmEmail)`.
    func confirmEmail(_ input: Operations.ConfirmEmail.Input) async throws -> Operations.ConfirmEmail.Output
    /// - Remark: HTTP `PUT /verification/sendEmailConfirmationCode`.
    /// - Remark: Generated from `#/paths//verification/sendEmailConfirmationCode/put(sendEmailConfirmationCode)`.
    func sendEmailConfirmationCode(_ input: Operations.SendEmailConfirmationCode.Input) async throws -> Operations.SendEmailConfirmationCode.Output
    /// - Remark: HTTP `GET /operations/pull`.
    /// - Remark: Generated from `#/paths//operations/pull/get(pullOperations)`.
    func pullOperations(_ input: Operations.PullOperations.Input) async throws -> Operations.PullOperations.Output
    /// - Remark: HTTP `POST /operations/push`.
    /// - Remark: Generated from `#/paths//operations/push/post(pushOperations)`.
    func pushOperations(_ input: Operations.PushOperations.Input) async throws -> Operations.PushOperations.Output
    /// - Remark: HTTP `POST /operations/confirm`.
    /// - Remark: Generated from `#/paths//operations/confirm/post(confirmOperations)`.
    func confirmOperations(_ input: Operations.ConfirmOperations.Input) async throws -> Operations.ConfirmOperations.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// - Remark: HTTP `PUT /auth/signup`.
    /// - Remark: Generated from `#/paths//auth/signup/put(signup)`.
    public func signup(
        headers: Operations.Signup.Input.Headers,
        body: Operations.Signup.Input.Body
    ) async throws -> Operations.Signup.Output {
        try await signup(Operations.Signup.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `PUT /auth/login`.
    /// - Remark: Generated from `#/paths//auth/login/put(login)`.
    public func login(
        headers: Operations.Login.Input.Headers,
        body: Operations.Login.Input.Body
    ) async throws -> Operations.Login.Output {
        try await login(Operations.Login.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `PUT /auth/refresh`.
    /// - Remark: Generated from `#/paths//auth/refresh/put(refreshSession)`.
    public func refreshSession(
        headers: Operations.RefreshSession.Input.Headers = .init(),
        body: Operations.RefreshSession.Input.Body
    ) async throws -> Operations.RefreshSession.Output {
        try await refreshSession(Operations.RefreshSession.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `PUT /auth/updateEmail`.
    /// - Remark: Generated from `#/paths//auth/updateEmail/put(updateEmail)`.
    public func updateEmail(
        headers: Operations.UpdateEmail.Input.Headers = .init(),
        body: Operations.UpdateEmail.Input.Body
    ) async throws -> Operations.UpdateEmail.Output {
        try await updateEmail(Operations.UpdateEmail.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `PUT /auth/updatePassword`.
    /// - Remark: Generated from `#/paths//auth/updatePassword/put(updatePassword)`.
    public func updatePassword(
        headers: Operations.UpdatePassword.Input.Headers = .init(),
        body: Operations.UpdatePassword.Input.Body
    ) async throws -> Operations.UpdatePassword.Output {
        try await updatePassword(Operations.UpdatePassword.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `PUT /auth/registerForPushNotifications`.
    /// - Remark: Generated from `#/paths//auth/registerForPushNotifications/put(registerForPushNotifications)`.
    public func registerForPushNotifications(
        headers: Operations.RegisterForPushNotifications.Input.Headers = .init(),
        body: Operations.RegisterForPushNotifications.Input.Body
    ) async throws -> Operations.RegisterForPushNotifications.Output {
        try await registerForPushNotifications(Operations.RegisterForPushNotifications.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `GET /avatars/get`.
    /// - Remark: Generated from `#/paths//avatars/get/get(getAvatars)`.
    public func getAvatars(
        query: Operations.GetAvatars.Input.Query,
        headers: Operations.GetAvatars.Input.Headers = .init()
    ) async throws -> Operations.GetAvatars.Output {
        try await getAvatars(Operations.GetAvatars.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /users/search`.
    /// - Remark: Generated from `#/paths//users/search/get(searchUsers)`.
    public func searchUsers(
        query: Operations.SearchUsers.Input.Query,
        headers: Operations.SearchUsers.Input.Headers = .init()
    ) async throws -> Operations.SearchUsers.Output {
        try await searchUsers(Operations.SearchUsers.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `PUT /verification/confirmEmail`.
    /// - Remark: Generated from `#/paths//verification/confirmEmail/put(confirmEmail)`.
    public func confirmEmail(
        headers: Operations.ConfirmEmail.Input.Headers = .init(),
        body: Operations.ConfirmEmail.Input.Body
    ) async throws -> Operations.ConfirmEmail.Output {
        try await confirmEmail(Operations.ConfirmEmail.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `PUT /verification/sendEmailConfirmationCode`.
    /// - Remark: Generated from `#/paths//verification/sendEmailConfirmationCode/put(sendEmailConfirmationCode)`.
    public func sendEmailConfirmationCode(headers: Operations.SendEmailConfirmationCode.Input.Headers = .init()) async throws -> Operations.SendEmailConfirmationCode.Output {
        try await sendEmailConfirmationCode(Operations.SendEmailConfirmationCode.Input(headers: headers))
    }
    /// - Remark: HTTP `GET /operations/pull`.
    /// - Remark: Generated from `#/paths//operations/pull/get(pullOperations)`.
    public func pullOperations(
        query: Operations.PullOperations.Input.Query,
        headers: Operations.PullOperations.Input.Headers = .init()
    ) async throws -> Operations.PullOperations.Output {
        try await pullOperations(Operations.PullOperations.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `POST /operations/push`.
    /// - Remark: Generated from `#/paths//operations/push/post(pushOperations)`.
    public func pushOperations(
        headers: Operations.PushOperations.Input.Headers = .init(),
        body: Operations.PushOperations.Input.Body
    ) async throws -> Operations.PushOperations.Output {
        try await pushOperations(Operations.PushOperations.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `POST /operations/confirm`.
    /// - Remark: Generated from `#/paths//operations/confirm/post(confirmOperations)`.
    public func confirmOperations(
        headers: Operations.ConfirmOperations.Input.Headers = .init(),
        body: Operations.ConfirmOperations.Input.Body
    ) async throws -> Operations.ConfirmOperations.Output {
        try await confirmOperations(Operations.ConfirmOperations.Input(
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// User Credentials.
        ///
        /// - Remark: Generated from `#/components/schemas/Credentials`.
        public struct Credentials: Codable, Hashable, Sendable {
            /// User email.
            ///
            /// - Remark: Generated from `#/components/schemas/Credentials/email`.
            public var email: Swift.String
            /// User password.
            ///
            /// - Remark: Generated from `#/components/schemas/Credentials/password`.
            public var password: Swift.String
            /// Creates a new `Credentials`.
            ///
            /// - Parameters:
            ///   - email: User email.
            ///   - password: User password.
            public init(
                email: Swift.String,
                password: Swift.String
            ) {
                self.email = email
                self.password = password
            }
            public enum CodingKeys: String, CodingKey {
                case email
                case password
            }
        }
        /// User Session.
        ///
        /// - Remark: Generated from `#/components/schemas/Session`.
        public struct Session: Codable, Hashable, Sendable {
            /// User Identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/Session/id`.
            public var id: Swift.String
            /// Users access token.
            ///
            /// - Remark: Generated from `#/components/schemas/Session/accessToken`.
            public var accessToken: Swift.String
            /// Users refresh token.
            ///
            /// - Remark: Generated from `#/components/schemas/Session/refreshToken`.
            public var refreshToken: Swift.String
            /// Creates a new `Session`.
            ///
            /// - Parameters:
            ///   - id: User Identifier.
            ///   - accessToken: Users access token.
            ///   - refreshToken: Users refresh token.
            public init(
                id: Swift.String,
                accessToken: Swift.String,
                refreshToken: Swift.String
            ) {
                self.id = id
                self.accessToken = accessToken
                self.refreshToken = refreshToken
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case accessToken
                case refreshToken
            }
        }
        /// All data required to startup a user session
        ///
        /// - Remark: Generated from `#/components/schemas/StartupData`.
        public struct StartupData: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StartupData/session`.
            public var session: Components.Schemas.Session
            /// - Remark: Generated from `#/components/schemas/StartupData/operations`.
            public var operations: [Components.Schemas.SomeOperation]
            /// Creates a new `StartupData`.
            ///
            /// - Parameters:
            ///   - session:
            ///   - operations:
            public init(
                session: Components.Schemas.Session,
                operations: [Components.Schemas.SomeOperation]
            ) {
                self.session = session
                self.operations = operations
            }
            public enum CodingKeys: String, CodingKey {
                case session
                case operations
            }
        }
        /// User.
        ///
        /// - Remark: Generated from `#/components/schemas/User`.
        public struct User: Codable, Hashable, Sendable {
            /// User Identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/User/id`.
            public var id: Swift.String
            /// Users owner Identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/User/ownerId`.
            public var ownerId: Swift.String
            /// Display name.
            ///
            /// - Remark: Generated from `#/components/schemas/User/displayName`.
            public var displayName: Swift.String
            /// Avatar Identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/User/avatarId`.
            public var avatarId: Swift.String?
            /// Creates a new `User`.
            ///
            /// - Parameters:
            ///   - id: User Identifier.
            ///   - ownerId: Users owner Identifier.
            ///   - displayName: Display name.
            ///   - avatarId: Avatar Identifier.
            public init(
                id: Swift.String,
                ownerId: Swift.String,
                displayName: Swift.String,
                avatarId: Swift.String? = nil
            ) {
                self.id = id
                self.ownerId = ownerId
                self.displayName = displayName
                self.avatarId = avatarId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case ownerId
                case displayName
                case avatarId
            }
        }
        /// - Remark: Generated from `#/components/schemas/SpendingShare`.
        public struct SpendingShare: Codable, Hashable, Sendable {
            /// User Identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/SpendingShare/userId`.
            public var userId: Swift.String
            /// Participant's owed amount of money.
            ///
            /// - Remark: Generated from `#/components/schemas/SpendingShare/amount`.
            public var amount: Swift.Int64
            /// Creates a new `SpendingShare`.
            ///
            /// - Parameters:
            ///   - userId: User Identifier.
            ///   - amount: Participant's owed amount of money.
            public init(
                userId: Swift.String,
                amount: Swift.Int64
            ) {
                self.userId = userId
                self.amount = amount
            }
            public enum CodingKeys: String, CodingKey {
                case userId
                case amount
            }
        }
        /// Image.
        ///
        /// - Remark: Generated from `#/components/schemas/Image`.
        public struct Image: Codable, Hashable, Sendable {
            /// Image identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/Image/id`.
            public var id: Swift.String
            /// base64 string representation of the image.
            ///
            /// - Remark: Generated from `#/components/schemas/Image/base64`.
            public var base64: Swift.String
            /// Creates a new `Image`.
            ///
            /// - Parameters:
            ///   - id: Image identifier.
            ///   - base64: base64 string representation of the image.
            public init(
                id: Swift.String,
                base64: Swift.String
            ) {
                self.id = id
                self.base64 = base64
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case base64
            }
        }
        /// - Remark: Generated from `#/components/schemas/Empty`.
        public struct Empty: Codable, Hashable, Sendable {
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `Empty`.
            ///
            /// - Parameters:
            ///   - additionalProperties: A container of undocumented properties.
            public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                self.additionalProperties = additionalProperties
            }
            public init(from decoder: any Decoder) throws {
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// - Remark: Generated from `#/components/schemas/OperationType`.
        @frozen public enum OperationType: String, Codable, Hashable, Sendable, CaseIterable {
            case regular = "regular"
            case large = "large"
        }
        /// Error
        ///
        /// - Remark: Generated from `#/components/schemas/Error`.
        public struct _Error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Error/reason`.
            public var reason: Components.Schemas.ErrorReason
            /// - Remark: Generated from `#/components/schemas/Error/description`.
            public var description: Swift.String?
            /// Creates a new `_Error`.
            ///
            /// - Parameters:
            ///   - reason:
            ///   - description:
            public init(
                reason: Components.Schemas.ErrorReason,
                description: Swift.String? = nil
            ) {
                self.reason = reason
                self.description = description
            }
            public enum CodingKeys: String, CodingKey {
                case reason
                case description
            }
        }
        /// Error
        ///
        /// - Remark: Generated from `#/components/schemas/ErrorResponse`.
        public struct ErrorResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/error`.
            public var error: Components.Schemas._Error
            /// Creates a new `ErrorResponse`.
            ///
            /// - Parameters:
            ///   - error:
            public init(error: Components.Schemas._Error) {
                self.error = error
            }
            public enum CodingKeys: String, CodingKey {
                case error
            }
        }
        /// - Remark: Generated from `#/components/schemas/ErrorReason`.
        @frozen public enum ErrorReason: String, Codable, Hashable, Sendable, CaseIterable {
            case wrongFormat = "wrongFormat"
            case alreadyTaken = "alreadyTaken"
            case tokenExpired = "tokenExpired"
            case wrongAccessToken = "wrongAccessToken"
            case _internal = "internal"
            case noSuchUser = "noSuchUser"
            case noSuchRequest = "noSuchRequest"
            case alreadySend = "alreadySend"
            case haveIncomingRequest = "haveIncomingRequest"
            case alreadyFriends = "alreadyFriends"
            case notAFriend = "notAFriend"
            case badRequest = "badRequest"
            case expenseNotFound = "expenseNotFound"
            case isNotYourExpense = "isNotYourExpense"
            case notDelivered = "notDelivered"
            case alreadyConfirmed = "alreadyConfirmed"
            case incorrectCredentials = "incorrectCredentials"
            case privacyViolation = "privacyViolation"
        }
        /// - Remark: Generated from `#/components/schemas/UpdateEmailOperation`.
        public struct UpdateEmailOperation: Codable, Hashable, Sendable {
            /// Update email operation
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEmailOperation/updateEmail`.
            public struct UpdateEmailPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UpdateEmailOperation/updateEmail/email`.
                public var email: Swift.String
                /// Creates a new `UpdateEmailPayload`.
                ///
                /// - Parameters:
                ///   - email:
                public init(email: Swift.String) {
                    self.email = email
                }
                public enum CodingKeys: String, CodingKey {
                    case email
                }
            }
            /// Update email operation
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEmailOperation/updateEmail`.
            public var updateEmail: Components.Schemas.UpdateEmailOperation.UpdateEmailPayload
            /// Creates a new `UpdateEmailOperation`.
            ///
            /// - Parameters:
            ///   - updateEmail: Update email operation
            public init(updateEmail: Components.Schemas.UpdateEmailOperation.UpdateEmailPayload) {
                self.updateEmail = updateEmail
            }
            public enum CodingKeys: String, CodingKey {
                case updateEmail
            }
        }
        /// - Remark: Generated from `#/components/schemas/VerifyEmailOperation`.
        public struct VerifyEmailOperation: Codable, Hashable, Sendable {
            /// Verify email operation
            ///
            /// - Remark: Generated from `#/components/schemas/VerifyEmailOperation/verifyEmail`.
            public struct VerifyEmailPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/VerifyEmailOperation/verifyEmail/verified`.
                public var verified: Swift.Bool
                /// Creates a new `VerifyEmailPayload`.
                ///
                /// - Parameters:
                ///   - verified:
                public init(verified: Swift.Bool) {
                    self.verified = verified
                }
                public enum CodingKeys: String, CodingKey {
                    case verified
                }
            }
            /// Verify email operation
            ///
            /// - Remark: Generated from `#/components/schemas/VerifyEmailOperation/verifyEmail`.
            public var verifyEmail: Components.Schemas.VerifyEmailOperation.VerifyEmailPayload
            /// Creates a new `VerifyEmailOperation`.
            ///
            /// - Parameters:
            ///   - verifyEmail: Verify email operation
            public init(verifyEmail: Components.Schemas.VerifyEmailOperation.VerifyEmailPayload) {
                self.verifyEmail = verifyEmail
            }
            public enum CodingKeys: String, CodingKey {
                case verifyEmail
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateUserOperation`.
        public struct CreateUserOperation: Codable, Hashable, Sendable {
            /// Create user operation
            ///
            /// - Remark: Generated from `#/components/schemas/CreateUserOperation/createUser`.
            public struct CreateUserPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateUserOperation/createUser/userId`.
                public var userId: Swift.String
                /// - Remark: Generated from `#/components/schemas/CreateUserOperation/createUser/displayName`.
                public var displayName: Swift.String
                /// Creates a new `CreateUserPayload`.
                ///
                /// - Parameters:
                ///   - userId:
                ///   - displayName:
                public init(
                    userId: Swift.String,
                    displayName: Swift.String
                ) {
                    self.userId = userId
                    self.displayName = displayName
                }
                public enum CodingKeys: String, CodingKey {
                    case userId
                    case displayName
                }
            }
            /// Create user operation
            ///
            /// - Remark: Generated from `#/components/schemas/CreateUserOperation/createUser`.
            public var createUser: Components.Schemas.CreateUserOperation.CreateUserPayload
            /// Creates a new `CreateUserOperation`.
            ///
            /// - Parameters:
            ///   - createUser: Create user operation
            public init(createUser: Components.Schemas.CreateUserOperation.CreateUserPayload) {
                self.createUser = createUser
            }
            public enum CodingKeys: String, CodingKey {
                case createUser
            }
        }
        /// - Remark: Generated from `#/components/schemas/BindUserOperation`.
        public struct BindUserOperation: Codable, Hashable, Sendable {
            /// Bind user operation
            ///
            /// - Remark: Generated from `#/components/schemas/BindUserOperation/bindUser`.
            public struct BindUserPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BindUserOperation/bindUser/oldId`.
                public var oldId: Swift.String
                /// - Remark: Generated from `#/components/schemas/BindUserOperation/bindUser/newId`.
                public var newId: Swift.String
                /// Creates a new `BindUserPayload`.
                ///
                /// - Parameters:
                ///   - oldId:
                ///   - newId:
                public init(
                    oldId: Swift.String,
                    newId: Swift.String
                ) {
                    self.oldId = oldId
                    self.newId = newId
                }
                public enum CodingKeys: String, CodingKey {
                    case oldId
                    case newId
                }
            }
            /// Bind user operation
            ///
            /// - Remark: Generated from `#/components/schemas/BindUserOperation/bindUser`.
            public var bindUser: Components.Schemas.BindUserOperation.BindUserPayload
            /// Creates a new `BindUserOperation`.
            ///
            /// - Parameters:
            ///   - bindUser: Bind user operation
            public init(bindUser: Components.Schemas.BindUserOperation.BindUserPayload) {
                self.bindUser = bindUser
            }
            public enum CodingKeys: String, CodingKey {
                case bindUser
            }
        }
        /// - Remark: Generated from `#/components/schemas/UpdateAvatarOperation`.
        public struct UpdateAvatarOperation: Codable, Hashable, Sendable {
            /// Update avatar operation
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateAvatarOperation/updateAvatar`.
            public struct UpdateAvatarPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UpdateAvatarOperation/updateAvatar/userId`.
                public var userId: Swift.String
                /// - Remark: Generated from `#/components/schemas/UpdateAvatarOperation/updateAvatar/imageId`.
                public var imageId: Swift.String?
                /// Creates a new `UpdateAvatarPayload`.
                ///
                /// - Parameters:
                ///   - userId:
                ///   - imageId:
                public init(
                    userId: Swift.String,
                    imageId: Swift.String? = nil
                ) {
                    self.userId = userId
                    self.imageId = imageId
                }
                public enum CodingKeys: String, CodingKey {
                    case userId
                    case imageId
                }
            }
            /// Update avatar operation
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateAvatarOperation/updateAvatar`.
            public var updateAvatar: Components.Schemas.UpdateAvatarOperation.UpdateAvatarPayload
            /// Creates a new `UpdateAvatarOperation`.
            ///
            /// - Parameters:
            ///   - updateAvatar: Update avatar operation
            public init(updateAvatar: Components.Schemas.UpdateAvatarOperation.UpdateAvatarPayload) {
                self.updateAvatar = updateAvatar
            }
            public enum CodingKeys: String, CodingKey {
                case updateAvatar
            }
        }
        /// - Remark: Generated from `#/components/schemas/UpdateDisplayNameOperation`.
        public struct UpdateDisplayNameOperation: Codable, Hashable, Sendable {
            /// Update display name operation
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateDisplayNameOperation/updateDisplayName`.
            public struct UpdateDisplayNamePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UpdateDisplayNameOperation/updateDisplayName/userId`.
                public var userId: Swift.String
                /// - Remark: Generated from `#/components/schemas/UpdateDisplayNameOperation/updateDisplayName/displayName`.
                public var displayName: Swift.String
                /// Creates a new `UpdateDisplayNamePayload`.
                ///
                /// - Parameters:
                ///   - userId:
                ///   - displayName:
                public init(
                    userId: Swift.String,
                    displayName: Swift.String
                ) {
                    self.userId = userId
                    self.displayName = displayName
                }
                public enum CodingKeys: String, CodingKey {
                    case userId
                    case displayName
                }
            }
            /// Update display name operation
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateDisplayNameOperation/updateDisplayName`.
            public var updateDisplayName: Components.Schemas.UpdateDisplayNameOperation.UpdateDisplayNamePayload
            /// Creates a new `UpdateDisplayNameOperation`.
            ///
            /// - Parameters:
            ///   - updateDisplayName: Update display name operation
            public init(updateDisplayName: Components.Schemas.UpdateDisplayNameOperation.UpdateDisplayNamePayload) {
                self.updateDisplayName = updateDisplayName
            }
            public enum CodingKeys: String, CodingKey {
                case updateDisplayName
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateSpendingGroupOperation`.
        public struct CreateSpendingGroupOperation: Codable, Hashable, Sendable {
            /// Create spending group operation
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpendingGroupOperation/createSpendingGroup`.
            public struct CreateSpendingGroupPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateSpendingGroupOperation/createSpendingGroup/groupId`.
                public var groupId: Swift.String
                /// - Remark: Generated from `#/components/schemas/CreateSpendingGroupOperation/createSpendingGroup/participants`.
                public var participants: [Swift.String]
                /// - Remark: Generated from `#/components/schemas/CreateSpendingGroupOperation/createSpendingGroup/displayName`.
                public var displayName: Swift.String?
                /// Creates a new `CreateSpendingGroupPayload`.
                ///
                /// - Parameters:
                ///   - groupId:
                ///   - participants:
                ///   - displayName:
                public init(
                    groupId: Swift.String,
                    participants: [Swift.String],
                    displayName: Swift.String? = nil
                ) {
                    self.groupId = groupId
                    self.participants = participants
                    self.displayName = displayName
                }
                public enum CodingKeys: String, CodingKey {
                    case groupId
                    case participants
                    case displayName
                }
            }
            /// Create spending group operation
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpendingGroupOperation/createSpendingGroup`.
            public var createSpendingGroup: Components.Schemas.CreateSpendingGroupOperation.CreateSpendingGroupPayload
            /// Creates a new `CreateSpendingGroupOperation`.
            ///
            /// - Parameters:
            ///   - createSpendingGroup: Create spending group operation
            public init(createSpendingGroup: Components.Schemas.CreateSpendingGroupOperation.CreateSpendingGroupPayload) {
                self.createSpendingGroup = createSpendingGroup
            }
            public enum CodingKeys: String, CodingKey {
                case createSpendingGroup
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteSpendingGroupOperation`.
        public struct DeleteSpendingGroupOperation: Codable, Hashable, Sendable {
            /// Delete spending group operation
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteSpendingGroupOperation/deleteSpendingGroup`.
            public struct DeleteSpendingGroupPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DeleteSpendingGroupOperation/deleteSpendingGroup/groupId`.
                public var groupId: Swift.String
                /// Creates a new `DeleteSpendingGroupPayload`.
                ///
                /// - Parameters:
                ///   - groupId:
                public init(groupId: Swift.String) {
                    self.groupId = groupId
                }
                public enum CodingKeys: String, CodingKey {
                    case groupId
                }
            }
            /// Delete spending group operation
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteSpendingGroupOperation/deleteSpendingGroup`.
            public var deleteSpendingGroup: Components.Schemas.DeleteSpendingGroupOperation.DeleteSpendingGroupPayload
            /// Creates a new `DeleteSpendingGroupOperation`.
            ///
            /// - Parameters:
            ///   - deleteSpendingGroup: Delete spending group operation
            public init(deleteSpendingGroup: Components.Schemas.DeleteSpendingGroupOperation.DeleteSpendingGroupPayload) {
                self.deleteSpendingGroup = deleteSpendingGroup
            }
            public enum CodingKeys: String, CodingKey {
                case deleteSpendingGroup
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateSpendingOperation`.
        public struct CreateSpendingOperation: Codable, Hashable, Sendable {
            /// Create spending operation
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpendingOperation/createSpending`.
            public struct CreateSpendingPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateSpendingOperation/createSpending/spendingId`.
                public var spendingId: Swift.String
                /// - Remark: Generated from `#/components/schemas/CreateSpendingOperation/createSpending/groupId`.
                public var groupId: Swift.String
                /// Spending display name.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateSpendingOperation/createSpending/name`.
                public var name: Swift.String
                /// Spending's currency 3-letter code. (ISO 4217)
                ///
                /// - Remark: Generated from `#/components/schemas/CreateSpendingOperation/createSpending/currency`.
                public var currency: Swift.String
                /// Spending's total amount multiplied by 100 (123 amount for currency code USD means $1.23)
                ///
                /// - Remark: Generated from `#/components/schemas/CreateSpendingOperation/createSpending/amount`.
                public var amount: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/CreateSpendingOperation/createSpending/shares`.
                public var shares: [Components.Schemas.SpendingShare]
                /// Creates a new `CreateSpendingPayload`.
                ///
                /// - Parameters:
                ///   - spendingId:
                ///   - groupId:
                ///   - name: Spending display name.
                ///   - currency: Spending's currency 3-letter code. (ISO 4217)
                ///   - amount: Spending's total amount multiplied by 100 (123 amount for currency code USD means $1.23)
                ///   - shares:
                public init(
                    spendingId: Swift.String,
                    groupId: Swift.String,
                    name: Swift.String,
                    currency: Swift.String,
                    amount: Swift.Int64,
                    shares: [Components.Schemas.SpendingShare]
                ) {
                    self.spendingId = spendingId
                    self.groupId = groupId
                    self.name = name
                    self.currency = currency
                    self.amount = amount
                    self.shares = shares
                }
                public enum CodingKeys: String, CodingKey {
                    case spendingId
                    case groupId
                    case name
                    case currency
                    case amount
                    case shares
                }
            }
            /// Create spending operation
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpendingOperation/createSpending`.
            public var createSpending: Components.Schemas.CreateSpendingOperation.CreateSpendingPayload
            /// Creates a new `CreateSpendingOperation`.
            ///
            /// - Parameters:
            ///   - createSpending: Create spending operation
            public init(createSpending: Components.Schemas.CreateSpendingOperation.CreateSpendingPayload) {
                self.createSpending = createSpending
            }
            public enum CodingKeys: String, CodingKey {
                case createSpending
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteSpendingOperation`.
        public struct DeleteSpendingOperation: Codable, Hashable, Sendable {
            /// Delete spending operation
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteSpendingOperation/deleteSpending`.
            public struct DeleteSpendingPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DeleteSpendingOperation/deleteSpending/spendingId`.
                public var spendingId: Swift.String
                /// - Remark: Generated from `#/components/schemas/DeleteSpendingOperation/deleteSpending/groupId`.
                public var groupId: Swift.String
                /// Creates a new `DeleteSpendingPayload`.
                ///
                /// - Parameters:
                ///   - spendingId:
                ///   - groupId:
                public init(
                    spendingId: Swift.String,
                    groupId: Swift.String
                ) {
                    self.spendingId = spendingId
                    self.groupId = groupId
                }
                public enum CodingKeys: String, CodingKey {
                    case spendingId
                    case groupId
                }
            }
            /// Delete spending operation
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteSpendingOperation/deleteSpending`.
            public var deleteSpending: Components.Schemas.DeleteSpendingOperation.DeleteSpendingPayload
            /// Creates a new `DeleteSpendingOperation`.
            ///
            /// - Parameters:
            ///   - deleteSpending: Delete spending operation
            public init(deleteSpending: Components.Schemas.DeleteSpendingOperation.DeleteSpendingPayload) {
                self.deleteSpending = deleteSpending
            }
            public enum CodingKeys: String, CodingKey {
                case deleteSpending
            }
        }
        /// - Remark: Generated from `#/components/schemas/UploadImageOperation`.
        public struct UploadImageOperation: Codable, Hashable, Sendable {
            /// Upload image operation
            ///
            /// - Remark: Generated from `#/components/schemas/UploadImageOperation/uploadImage`.
            public struct UploadImagePayload: Codable, Hashable, Sendable {
                /// image identifier
                ///
                /// - Remark: Generated from `#/components/schemas/UploadImageOperation/uploadImage/imageId`.
                public var imageId: Swift.String
                /// base64 string representation of the image.
                ///
                /// - Remark: Generated from `#/components/schemas/UploadImageOperation/uploadImage/base64`.
                public var base64: Swift.String
                /// Creates a new `UploadImagePayload`.
                ///
                /// - Parameters:
                ///   - imageId: image identifier
                ///   - base64: base64 string representation of the image.
                public init(
                    imageId: Swift.String,
                    base64: Swift.String
                ) {
                    self.imageId = imageId
                    self.base64 = base64
                }
                public enum CodingKeys: String, CodingKey {
                    case imageId
                    case base64
                }
            }
            /// Upload image operation
            ///
            /// - Remark: Generated from `#/components/schemas/UploadImageOperation/uploadImage`.
            public var uploadImage: Components.Schemas.UploadImageOperation.UploadImagePayload
            /// Creates a new `UploadImageOperation`.
            ///
            /// - Parameters:
            ///   - uploadImage: Upload image operation
            public init(uploadImage: Components.Schemas.UploadImageOperation.UploadImagePayload) {
                self.uploadImage = uploadImage
            }
            public enum CodingKeys: String, CodingKey {
                case uploadImage
            }
        }
        /// Common properties for any operation
        ///
        /// - Remark: Generated from `#/components/schemas/BaseOperation`.
        public struct BaseOperation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BaseOperation/operationId`.
            public var operationId: Swift.String
            /// - Remark: Generated from `#/components/schemas/BaseOperation/createdAt`.
            public var createdAt: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/BaseOperation/authorId`.
            public var authorId: Swift.String
            /// Creates a new `BaseOperation`.
            ///
            /// - Parameters:
            ///   - operationId:
            ///   - createdAt:
            ///   - authorId:
            public init(
                operationId: Swift.String,
                createdAt: Swift.Int64,
                authorId: Swift.String
            ) {
                self.operationId = operationId
                self.createdAt = createdAt
                self.authorId = authorId
            }
            public enum CodingKeys: String, CodingKey {
                case operationId
                case createdAt
                case authorId
            }
        }
        /// - Remark: Generated from `#/components/schemas/SomeOperation`.
        public struct SomeOperation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SomeOperation/value1`.
            public var value1: Components.Schemas.BaseOperation
            /// - Remark: Generated from `#/components/schemas/SomeOperation/value2`.
            @frozen public enum Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/SomeOperation/value2/case1`.
                case CreateUserOperation(Components.Schemas.CreateUserOperation)
                /// - Remark: Generated from `#/components/schemas/SomeOperation/value2/case2`.
                case BindUserOperation(Components.Schemas.BindUserOperation)
                /// - Remark: Generated from `#/components/schemas/SomeOperation/value2/case3`.
                case UpdateAvatarOperation(Components.Schemas.UpdateAvatarOperation)
                /// - Remark: Generated from `#/components/schemas/SomeOperation/value2/case4`.
                case UpdateDisplayNameOperation(Components.Schemas.UpdateDisplayNameOperation)
                /// - Remark: Generated from `#/components/schemas/SomeOperation/value2/case5`.
                case CreateSpendingGroupOperation(Components.Schemas.CreateSpendingGroupOperation)
                /// - Remark: Generated from `#/components/schemas/SomeOperation/value2/case6`.
                case DeleteSpendingGroupOperation(Components.Schemas.DeleteSpendingGroupOperation)
                /// - Remark: Generated from `#/components/schemas/SomeOperation/value2/case7`.
                case CreateSpendingOperation(Components.Schemas.CreateSpendingOperation)
                /// - Remark: Generated from `#/components/schemas/SomeOperation/value2/case8`.
                case DeleteSpendingOperation(Components.Schemas.DeleteSpendingOperation)
                /// - Remark: Generated from `#/components/schemas/SomeOperation/value2/case9`.
                case UpdateEmailOperation(Components.Schemas.UpdateEmailOperation)
                /// - Remark: Generated from `#/components/schemas/SomeOperation/value2/case10`.
                case VerifyEmailOperation(Components.Schemas.VerifyEmailOperation)
                /// - Remark: Generated from `#/components/schemas/SomeOperation/value2/case11`.
                case UploadImageOperation(Components.Schemas.UploadImageOperation)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .CreateUserOperation(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .BindUserOperation(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .UpdateAvatarOperation(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .UpdateDisplayNameOperation(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .CreateSpendingGroupOperation(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .DeleteSpendingGroupOperation(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .CreateSpendingOperation(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .DeleteSpendingOperation(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .UpdateEmailOperation(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .VerifyEmailOperation(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .UploadImageOperation(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .CreateUserOperation(value):
                        try value.encode(to: encoder)
                    case let .BindUserOperation(value):
                        try value.encode(to: encoder)
                    case let .UpdateAvatarOperation(value):
                        try value.encode(to: encoder)
                    case let .UpdateDisplayNameOperation(value):
                        try value.encode(to: encoder)
                    case let .CreateSpendingGroupOperation(value):
                        try value.encode(to: encoder)
                    case let .DeleteSpendingGroupOperation(value):
                        try value.encode(to: encoder)
                    case let .CreateSpendingOperation(value):
                        try value.encode(to: encoder)
                    case let .DeleteSpendingOperation(value):
                        try value.encode(to: encoder)
                    case let .UpdateEmailOperation(value):
                        try value.encode(to: encoder)
                    case let .VerifyEmailOperation(value):
                        try value.encode(to: encoder)
                    case let .UploadImageOperation(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/SomeOperation/value2`.
            public var value2: Components.Schemas.SomeOperation.Value2Payload
            /// Creates a new `SomeOperation`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.BaseOperation,
                value2: Components.Schemas.SomeOperation.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// - Remark: HTTP `PUT /auth/signup`.
    /// - Remark: Generated from `#/paths//auth/signup/put(signup)`.
    public enum Signup {
        public static let id: Swift.String = "signup"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/signup/PUT/header`.
            public struct Headers: Sendable, Hashable {
                /// Device Identifier
                ///
                /// - Remark: Generated from `#/paths/auth/signup/PUT/header/X-Device-ID`.
                public var xDeviceID: Swift.String
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Signup.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - xDeviceID: Device Identifier
                ///   - accept:
                public init(
                    xDeviceID: Swift.String,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Signup.AcceptableContentType>] = .defaultValues()
                ) {
                    self.xDeviceID = xDeviceID
                    self.accept = accept
                }
            }
            public var headers: Operations.Signup.Input.Headers
            /// - Remark: Generated from `#/paths/auth/signup/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// Signup Request
                ///
                /// - Remark: Generated from `#/paths/auth/signup/PUT/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/auth/signup/PUT/requestBody/json/credentials`.
                    public var credentials: Components.Schemas.Credentials
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - credentials:
                    public init(credentials: Components.Schemas.Credentials) {
                        self.credentials = credentials
                    }
                    public enum CodingKeys: String, CodingKey {
                        case credentials
                    }
                }
                /// - Remark: Generated from `#/paths/auth/signup/PUT/requestBody/content/application\/json`.
                case json(Operations.Signup.Input.Body.JsonPayload)
            }
            public var body: Operations.Signup.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.Signup.Input.Headers,
                body: Operations.Signup.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/signup/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/signup/PUT/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/auth/signup/PUT/responses/200/content/json/response`.
                        public var response: Components.Schemas.StartupData
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - response:
                        public init(response: Components.Schemas.StartupData) {
                            self.response = response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case response
                        }
                    }
                    /// - Remark: Generated from `#/paths/auth/signup/PUT/responses/200/content/application\/json`.
                    case json(Operations.Signup.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.Signup.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Signup.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Signup.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Created user session.
            ///
            /// - Remark: Generated from `#/paths//auth/signup/put(signup)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Signup.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Signup.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/signup/PUT/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/signup/PUT/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Signup.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Signup.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Conflict - email is already taken.
            ///
            /// - Remark: Generated from `#/paths//auth/signup/put(signup)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.Signup.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.Signup.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/signup/PUT/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/signup/PUT/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Signup.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Signup.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable Entity - credentials format is wrong.
            ///
            /// - Remark: Generated from `#/paths//auth/signup/put(signup)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.Signup.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.Signup.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/signup/PUT/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/signup/PUT/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Signup.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Signup.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Something went wrong.
            ///
            /// - Remark: Generated from `#/paths//auth/signup/put(signup)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.Signup.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.Signup.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `PUT /auth/login`.
    /// - Remark: Generated from `#/paths//auth/login/put(login)`.
    public enum Login {
        public static let id: Swift.String = "login"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/login/PUT/header`.
            public struct Headers: Sendable, Hashable {
                /// Device Identifier
                ///
                /// - Remark: Generated from `#/paths/auth/login/PUT/header/X-Device-ID`.
                public var xDeviceID: Swift.String
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Login.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - xDeviceID: Device Identifier
                ///   - accept:
                public init(
                    xDeviceID: Swift.String,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Login.AcceptableContentType>] = .defaultValues()
                ) {
                    self.xDeviceID = xDeviceID
                    self.accept = accept
                }
            }
            public var headers: Operations.Login.Input.Headers
            /// - Remark: Generated from `#/paths/auth/login/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/login/PUT/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/auth/login/PUT/requestBody/json/credentials`.
                    public var credentials: Components.Schemas.Credentials
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - credentials:
                    public init(credentials: Components.Schemas.Credentials) {
                        self.credentials = credentials
                    }
                    public enum CodingKeys: String, CodingKey {
                        case credentials
                    }
                }
                /// - Remark: Generated from `#/paths/auth/login/PUT/requestBody/content/application\/json`.
                case json(Operations.Login.Input.Body.JsonPayload)
            }
            public var body: Operations.Login.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.Login.Input.Headers,
                body: Operations.Login.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/login/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/login/PUT/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/auth/login/PUT/responses/200/content/json/response`.
                        public var response: Components.Schemas.StartupData
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - response:
                        public init(response: Components.Schemas.StartupData) {
                            self.response = response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case response
                        }
                    }
                    /// - Remark: Generated from `#/paths/auth/login/PUT/responses/200/content/application\/json`.
                    case json(Operations.Login.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.Login.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Login.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Login.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Logged in user session. Another sessions have been invalidated.
            ///
            /// - Remark: Generated from `#/paths//auth/login/put(login)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Login.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Login.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/login/PUT/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/login/PUT/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Login.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Login.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Conflict - credentials are wrong.
            ///
            /// - Remark: Generated from `#/paths//auth/login/put(login)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.Login.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.Login.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/login/PUT/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/login/PUT/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Login.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Login.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Something went wrong.
            ///
            /// - Remark: Generated from `#/paths//auth/login/put(login)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.Login.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.Login.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `PUT /auth/refresh`.
    /// - Remark: Generated from `#/paths//auth/refresh/put(refreshSession)`.
    public enum RefreshSession {
        public static let id: Swift.String = "refreshSession"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/refresh/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RefreshSession.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RefreshSession.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.RefreshSession.Input.Headers
            /// - Remark: Generated from `#/paths/auth/refresh/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/refresh/PUT/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/auth/refresh/PUT/requestBody/json/refreshToken`.
                    public var refreshToken: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - refreshToken:
                    public init(refreshToken: Swift.String) {
                        self.refreshToken = refreshToken
                    }
                    public enum CodingKeys: String, CodingKey {
                        case refreshToken
                    }
                }
                /// - Remark: Generated from `#/paths/auth/refresh/PUT/requestBody/content/application\/json`.
                case json(Operations.RefreshSession.Input.Body.JsonPayload)
            }
            public var body: Operations.RefreshSession.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.RefreshSession.Input.Headers = .init(),
                body: Operations.RefreshSession.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/refresh/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/refresh/PUT/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/auth/refresh/PUT/responses/200/content/json/response`.
                        public var response: Components.Schemas.Session
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - response:
                        public init(response: Components.Schemas.Session) {
                            self.response = response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case response
                        }
                    }
                    /// - Remark: Generated from `#/paths/auth/refresh/PUT/responses/200/content/application\/json`.
                    case json(Operations.RefreshSession.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.RefreshSession.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RefreshSession.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RefreshSession.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Refreshed user session. Another sessions have been invalidated.
            ///
            /// - Remark: Generated from `#/paths//auth/refresh/put(refreshSession)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RefreshSession.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RefreshSession.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/refresh/PUT/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/refresh/PUT/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RefreshSession.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RefreshSession.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized - provided token is expired.
            ///
            /// - Remark: Generated from `#/paths//auth/refresh/put(refreshSession)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.RefreshSession.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.RefreshSession.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/refresh/PUT/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/refresh/PUT/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RefreshSession.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RefreshSession.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Conflict - provided token is wrong.
            ///
            /// - Remark: Generated from `#/paths//auth/refresh/put(refreshSession)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.RefreshSession.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.RefreshSession.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/refresh/PUT/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/refresh/PUT/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RefreshSession.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RefreshSession.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Something went wrong.
            ///
            /// - Remark: Generated from `#/paths//auth/refresh/put(refreshSession)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.RefreshSession.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.RefreshSession.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `PUT /auth/updateEmail`.
    /// - Remark: Generated from `#/paths//auth/updateEmail/put(updateEmail)`.
    public enum UpdateEmail {
        public static let id: Swift.String = "updateEmail"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/updateEmail/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UpdateEmail.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UpdateEmail.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UpdateEmail.Input.Headers
            /// - Remark: Generated from `#/paths/auth/updateEmail/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/updateEmail/PUT/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/auth/updateEmail/PUT/requestBody/json/email`.
                    public var email: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - email:
                    public init(email: Swift.String) {
                        self.email = email
                    }
                    public enum CodingKeys: String, CodingKey {
                        case email
                    }
                }
                /// - Remark: Generated from `#/paths/auth/updateEmail/PUT/requestBody/content/application\/json`.
                case json(Operations.UpdateEmail.Input.Body.JsonPayload)
            }
            public var body: Operations.UpdateEmail.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UpdateEmail.Input.Headers = .init(),
                body: Operations.UpdateEmail.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/updateEmail/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/updateEmail/PUT/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/auth/updateEmail/PUT/responses/200/content/json/response`.
                        public var response: Components.Schemas.Empty
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - response:
                        public init(response: Components.Schemas.Empty) {
                            self.response = response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case response
                        }
                    }
                    /// - Remark: Generated from `#/paths/auth/updateEmail/PUT/responses/200/content/application\/json`.
                    case json(Operations.UpdateEmail.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.UpdateEmail.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UpdateEmail.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UpdateEmail.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Active user session associated with new email. Another sessions have been invalidated.
            ///
            /// - Remark: Generated from `#/paths//auth/updateEmail/put(updateEmail)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UpdateEmail.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UpdateEmail.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/updateEmail/PUT/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/updateEmail/PUT/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UpdateEmail.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UpdateEmail.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthenticated
            ///
            /// - Remark: Generated from `#/paths//auth/updateEmail/put(updateEmail)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.UpdateEmail.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.UpdateEmail.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/updateEmail/PUT/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/updateEmail/PUT/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UpdateEmail.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UpdateEmail.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Conflict - email is already taken.
            ///
            /// - Remark: Generated from `#/paths//auth/updateEmail/put(updateEmail)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.UpdateEmail.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.UpdateEmail.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/updateEmail/PUT/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/updateEmail/PUT/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UpdateEmail.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UpdateEmail.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable Entity - email format is wrong.
            ///
            /// - Remark: Generated from `#/paths//auth/updateEmail/put(updateEmail)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.UpdateEmail.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.UpdateEmail.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/updateEmail/PUT/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/updateEmail/PUT/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UpdateEmail.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UpdateEmail.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Something went wrong.
            ///
            /// - Remark: Generated from `#/paths//auth/updateEmail/put(updateEmail)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.UpdateEmail.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.UpdateEmail.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `PUT /auth/updatePassword`.
    /// - Remark: Generated from `#/paths//auth/updatePassword/put(updatePassword)`.
    public enum UpdatePassword {
        public static let id: Swift.String = "updatePassword"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/updatePassword/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UpdatePassword.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UpdatePassword.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UpdatePassword.Input.Headers
            /// - Remark: Generated from `#/paths/auth/updatePassword/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/updatePassword/PUT/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/auth/updatePassword/PUT/requestBody/json/old`.
                    public var old: Swift.String
                    /// - Remark: Generated from `#/paths/auth/updatePassword/PUT/requestBody/json/new`.
                    public var new: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - old:
                    ///   - new:
                    public init(
                        old: Swift.String,
                        new: Swift.String
                    ) {
                        self.old = old
                        self.new = new
                    }
                    public enum CodingKeys: String, CodingKey {
                        case old
                        case new
                    }
                }
                /// - Remark: Generated from `#/paths/auth/updatePassword/PUT/requestBody/content/application\/json`.
                case json(Operations.UpdatePassword.Input.Body.JsonPayload)
            }
            public var body: Operations.UpdatePassword.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UpdatePassword.Input.Headers = .init(),
                body: Operations.UpdatePassword.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/updatePassword/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/updatePassword/PUT/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/auth/updatePassword/PUT/responses/200/content/json/response`.
                        public var response: Components.Schemas.Empty
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - response:
                        public init(response: Components.Schemas.Empty) {
                            self.response = response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case response
                        }
                    }
                    /// - Remark: Generated from `#/paths/auth/updatePassword/PUT/responses/200/content/application\/json`.
                    case json(Operations.UpdatePassword.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.UpdatePassword.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UpdatePassword.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UpdatePassword.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Active user session associated with new password. Another sessions have been invalidated.
            ///
            /// - Remark: Generated from `#/paths//auth/updatePassword/put(updatePassword)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UpdatePassword.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UpdatePassword.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/updatePassword/PUT/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/updatePassword/PUT/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UpdatePassword.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UpdatePassword.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthenticated
            ///
            /// - Remark: Generated from `#/paths//auth/updatePassword/put(updatePassword)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.UpdatePassword.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.UpdatePassword.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/updatePassword/PUT/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/updatePassword/PUT/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UpdatePassword.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UpdatePassword.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Conflict - old password is wrong.
            ///
            /// - Remark: Generated from `#/paths//auth/updatePassword/put(updatePassword)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.UpdatePassword.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.UpdatePassword.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/updatePassword/PUT/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/updatePassword/PUT/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UpdatePassword.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UpdatePassword.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable Entity - password format is wrong.
            ///
            /// - Remark: Generated from `#/paths//auth/updatePassword/put(updatePassword)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.UpdatePassword.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.UpdatePassword.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/updatePassword/PUT/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/updatePassword/PUT/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UpdatePassword.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UpdatePassword.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Something went wrong.
            ///
            /// - Remark: Generated from `#/paths//auth/updatePassword/put(updatePassword)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.UpdatePassword.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.UpdatePassword.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `PUT /auth/registerForPushNotifications`.
    /// - Remark: Generated from `#/paths//auth/registerForPushNotifications/put(registerForPushNotifications)`.
    public enum RegisterForPushNotifications {
        public static let id: Swift.String = "registerForPushNotifications"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/registerForPushNotifications/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RegisterForPushNotifications.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RegisterForPushNotifications.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.RegisterForPushNotifications.Input.Headers
            /// - Remark: Generated from `#/paths/auth/registerForPushNotifications/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/registerForPushNotifications/PUT/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/auth/registerForPushNotifications/PUT/requestBody/json/token`.
                    public var token: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - token:
                    public init(token: Swift.String) {
                        self.token = token
                    }
                    public enum CodingKeys: String, CodingKey {
                        case token
                    }
                }
                /// - Remark: Generated from `#/paths/auth/registerForPushNotifications/PUT/requestBody/content/application\/json`.
                case json(Operations.RegisterForPushNotifications.Input.Body.JsonPayload)
            }
            public var body: Operations.RegisterForPushNotifications.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.RegisterForPushNotifications.Input.Headers = .init(),
                body: Operations.RegisterForPushNotifications.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/registerForPushNotifications/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/registerForPushNotifications/PUT/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/auth/registerForPushNotifications/PUT/responses/200/content/json/response`.
                        public var response: Components.Schemas.Empty
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - response:
                        public init(response: Components.Schemas.Empty) {
                            self.response = response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case response
                        }
                    }
                    /// - Remark: Generated from `#/paths/auth/registerForPushNotifications/PUT/responses/200/content/application\/json`.
                    case json(Operations.RegisterForPushNotifications.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.RegisterForPushNotifications.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RegisterForPushNotifications.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RegisterForPushNotifications.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Token has been registered.
            ///
            /// - Remark: Generated from `#/paths//auth/registerForPushNotifications/put(registerForPushNotifications)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RegisterForPushNotifications.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RegisterForPushNotifications.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/registerForPushNotifications/PUT/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/registerForPushNotifications/PUT/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RegisterForPushNotifications.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RegisterForPushNotifications.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthenticated
            ///
            /// - Remark: Generated from `#/paths//auth/registerForPushNotifications/put(registerForPushNotifications)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.RegisterForPushNotifications.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.RegisterForPushNotifications.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/registerForPushNotifications/PUT/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/registerForPushNotifications/PUT/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RegisterForPushNotifications.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RegisterForPushNotifications.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Something went wrong.
            ///
            /// - Remark: Generated from `#/paths//auth/registerForPushNotifications/put(registerForPushNotifications)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.RegisterForPushNotifications.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.RegisterForPushNotifications.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /avatars/get`.
    /// - Remark: Generated from `#/paths//avatars/get/get(getAvatars)`.
    public enum GetAvatars {
        public static let id: Swift.String = "getAvatars"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/avatars/get/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/avatars/get/GET/query/ids`.
                public var ids: [Swift.String]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.String]) {
                    self.ids = ids
                }
            }
            public var query: Operations.GetAvatars.Input.Query
            /// - Remark: Generated from `#/paths/avatars/get/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAvatars.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAvatars.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetAvatars.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.GetAvatars.Input.Query,
                headers: Operations.GetAvatars.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/avatars/get/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/avatars/get/GET/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/avatars/get/GET/responses/200/content/json/response`.
                        public struct ResponsePayload: Codable, Hashable, Sendable {
                            /// A container of undocumented properties.
                            public var additionalProperties: [String: Components.Schemas.Image]
                            /// Creates a new `ResponsePayload`.
                            ///
                            /// - Parameters:
                            ///   - additionalProperties: A container of undocumented properties.
                            public init(additionalProperties: [String: Components.Schemas.Image] = .init()) {
                                self.additionalProperties = additionalProperties
                            }
                            public init(from decoder: any Decoder) throws {
                                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeAdditionalProperties(additionalProperties)
                            }
                        }
                        /// - Remark: Generated from `#/paths/avatars/get/GET/responses/200/content/json/response`.
                        public var response: Operations.GetAvatars.Output.Ok.Body.JsonPayload.ResponsePayload
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - response:
                        public init(response: Operations.GetAvatars.Output.Ok.Body.JsonPayload.ResponsePayload) {
                            self.response = response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case response
                        }
                    }
                    /// - Remark: Generated from `#/paths/avatars/get/GET/responses/200/content/application\/json`.
                    case json(Operations.GetAvatars.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetAvatars.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetAvatars.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetAvatars.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Avatars associated with provided user ids.
            ///
            /// - Remark: Generated from `#/paths//avatars/get/get(getAvatars)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetAvatars.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetAvatars.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/avatars/get/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/avatars/get/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetAvatars.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetAvatars.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Something went wrong.
            ///
            /// - Remark: Generated from `#/paths//avatars/get/get(getAvatars)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.GetAvatars.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.GetAvatars.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /users/search`.
    /// - Remark: Generated from `#/paths//users/search/get(searchUsers)`.
    public enum SearchUsers {
        public static let id: Swift.String = "searchUsers"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/search/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/search/GET/query/query`.
                public var query: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - query:
                public init(query: Swift.String) {
                    self.query = query
                }
            }
            public var query: Operations.SearchUsers.Input.Query
            /// - Remark: Generated from `#/paths/users/search/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SearchUsers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SearchUsers.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.SearchUsers.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.SearchUsers.Input.Query,
                headers: Operations.SearchUsers.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/search/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/search/GET/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/search/GET/responses/200/content/json/response`.
                        public var response: [Components.Schemas.SomeOperation]
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - response:
                        public init(response: [Components.Schemas.SomeOperation]) {
                            self.response = response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case response
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/search/GET/responses/200/content/application\/json`.
                    case json(Operations.SearchUsers.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.SearchUsers.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.SearchUsers.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SearchUsers.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User infos matching provided search query.
            ///
            /// - Remark: Generated from `#/paths//users/search/get(searchUsers)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SearchUsers.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.SearchUsers.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/search/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/search/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.SearchUsers.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SearchUsers.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthenticated
            ///
            /// - Remark: Generated from `#/paths//users/search/get(searchUsers)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.SearchUsers.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.SearchUsers.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/search/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/search/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.SearchUsers.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SearchUsers.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Something went wrong.
            ///
            /// - Remark: Generated from `#/paths//users/search/get(searchUsers)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SearchUsers.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.SearchUsers.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `PUT /verification/confirmEmail`.
    /// - Remark: Generated from `#/paths//verification/confirmEmail/put(confirmEmail)`.
    public enum ConfirmEmail {
        public static let id: Swift.String = "confirmEmail"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/verification/confirmEmail/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConfirmEmail.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConfirmEmail.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConfirmEmail.Input.Headers
            /// - Remark: Generated from `#/paths/verification/confirmEmail/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/verification/confirmEmail/PUT/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/verification/confirmEmail/PUT/requestBody/json/code`.
                    public var code: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - code:
                    public init(code: Swift.String) {
                        self.code = code
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                    }
                }
                /// - Remark: Generated from `#/paths/verification/confirmEmail/PUT/requestBody/content/application\/json`.
                case json(Operations.ConfirmEmail.Input.Body.JsonPayload)
            }
            public var body: Operations.ConfirmEmail.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConfirmEmail.Input.Headers = .init(),
                body: Operations.ConfirmEmail.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/verification/confirmEmail/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/verification/confirmEmail/PUT/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/verification/confirmEmail/PUT/responses/200/content/json/response`.
                        public var response: Components.Schemas.Empty
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - response:
                        public init(response: Components.Schemas.Empty) {
                            self.response = response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case response
                        }
                    }
                    /// - Remark: Generated from `#/paths/verification/confirmEmail/PUT/responses/200/content/application\/json`.
                    case json(Operations.ConfirmEmail.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.ConfirmEmail.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConfirmEmail.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConfirmEmail.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Current user email has been confirmed.
            ///
            /// - Remark: Generated from `#/paths//verification/confirmEmail/put(confirmEmail)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConfirmEmail.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConfirmEmail.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/verification/confirmEmail/PUT/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/verification/confirmEmail/PUT/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConfirmEmail.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConfirmEmail.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Confirmation code is wrong.
            ///
            /// - Remark: Generated from `#/paths//verification/confirmEmail/put(confirmEmail)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.ConfirmEmail.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.ConfirmEmail.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/verification/confirmEmail/PUT/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/verification/confirmEmail/PUT/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConfirmEmail.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConfirmEmail.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Something went wrong.
            ///
            /// - Remark: Generated from `#/paths//verification/confirmEmail/put(confirmEmail)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ConfirmEmail.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.ConfirmEmail.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `PUT /verification/sendEmailConfirmationCode`.
    /// - Remark: Generated from `#/paths//verification/sendEmailConfirmationCode/put(sendEmailConfirmationCode)`.
    public enum SendEmailConfirmationCode {
        public static let id: Swift.String = "sendEmailConfirmationCode"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/verification/sendEmailConfirmationCode/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SendEmailConfirmationCode.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SendEmailConfirmationCode.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.SendEmailConfirmationCode.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.SendEmailConfirmationCode.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/verification/sendEmailConfirmationCode/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/verification/sendEmailConfirmationCode/PUT/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/verification/sendEmailConfirmationCode/PUT/responses/200/content/json/response`.
                        public var response: Components.Schemas.Empty
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - response:
                        public init(response: Components.Schemas.Empty) {
                            self.response = response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case response
                        }
                    }
                    /// - Remark: Generated from `#/paths/verification/sendEmailConfirmationCode/PUT/responses/200/content/application\/json`.
                    case json(Operations.SendEmailConfirmationCode.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.SendEmailConfirmationCode.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.SendEmailConfirmationCode.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SendEmailConfirmationCode.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Email confirmation code has been sent.
            ///
            /// - Remark: Generated from `#/paths//verification/sendEmailConfirmationCode/put(sendEmailConfirmationCode)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SendEmailConfirmationCode.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.SendEmailConfirmationCode.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/verification/sendEmailConfirmationCode/PUT/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/verification/sendEmailConfirmationCode/PUT/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.SendEmailConfirmationCode.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SendEmailConfirmationCode.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthenticated
            ///
            /// - Remark: Generated from `#/paths//verification/sendEmailConfirmationCode/put(sendEmailConfirmationCode)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.SendEmailConfirmationCode.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.SendEmailConfirmationCode.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/verification/sendEmailConfirmationCode/PUT/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/verification/sendEmailConfirmationCode/PUT/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.SendEmailConfirmationCode.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SendEmailConfirmationCode.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Something went wrong.
            ///
            /// - Remark: Generated from `#/paths//verification/sendEmailConfirmationCode/put(sendEmailConfirmationCode)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SendEmailConfirmationCode.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.SendEmailConfirmationCode.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /operations/pull`.
    /// - Remark: Generated from `#/paths//operations/pull/get(pullOperations)`.
    public enum PullOperations {
        public static let id: Swift.String = "pullOperations"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/operations/pull/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/operations/pull/GET/query/type`.
                public var _type: Components.Schemas.OperationType
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: Components.Schemas.OperationType) {
                    self._type = _type
                }
            }
            public var query: Operations.PullOperations.Input.Query
            /// - Remark: Generated from `#/paths/operations/pull/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullOperations.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullOperations.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PullOperations.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.PullOperations.Input.Query,
                headers: Operations.PullOperations.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/operations/pull/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/operations/pull/GET/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/operations/pull/GET/responses/200/content/json/response`.
                        public var response: [Components.Schemas.SomeOperation]
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - response:
                        public init(response: [Components.Schemas.SomeOperation]) {
                            self.response = response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case response
                        }
                    }
                    /// - Remark: Generated from `#/paths/operations/pull/GET/responses/200/content/application\/json`.
                    case json(Operations.PullOperations.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PullOperations.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PullOperations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PullOperations.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Operations list to be applied.
            ///
            /// - Remark: Generated from `#/paths//operations/pull/get(pullOperations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PullOperations.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PullOperations.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/operations/pull/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/operations/pull/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PullOperations.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PullOperations.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthenticated
            ///
            /// - Remark: Generated from `#/paths//operations/pull/get(pullOperations)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.PullOperations.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.PullOperations.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/operations/pull/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/operations/pull/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PullOperations.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PullOperations.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Something went wrong.
            ///
            /// - Remark: Generated from `#/paths//operations/pull/get(pullOperations)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.PullOperations.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.PullOperations.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /operations/push`.
    /// - Remark: Generated from `#/paths//operations/push/post(pushOperations)`.
    public enum PushOperations {
        public static let id: Swift.String = "pushOperations"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/operations/push/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PushOperations.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PushOperations.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PushOperations.Input.Headers
            /// - Remark: Generated from `#/paths/operations/push/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/operations/push/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/operations/push/POST/requestBody/json/operations`.
                    public var operations: [Components.Schemas.SomeOperation]
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - operations:
                    public init(operations: [Components.Schemas.SomeOperation]) {
                        self.operations = operations
                    }
                    public enum CodingKeys: String, CodingKey {
                        case operations
                    }
                }
                /// - Remark: Generated from `#/paths/operations/push/POST/requestBody/content/application\/json`.
                case json(Operations.PushOperations.Input.Body.JsonPayload)
            }
            public var body: Operations.PushOperations.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PushOperations.Input.Headers = .init(),
                body: Operations.PushOperations.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/operations/push/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/operations/push/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/operations/push/POST/responses/200/content/json/response`.
                        public var response: [Components.Schemas.SomeOperation]
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - response:
                        public init(response: [Components.Schemas.SomeOperation]) {
                            self.response = response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case response
                        }
                    }
                    /// - Remark: Generated from `#/paths/operations/push/POST/responses/200/content/application\/json`.
                    case json(Operations.PushOperations.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PushOperations.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PushOperations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PushOperations.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Operations list to be applied.
            ///
            /// - Remark: Generated from `#/paths//operations/push/post(pushOperations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PushOperations.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PushOperations.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/operations/push/POST/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/operations/push/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PushOperations.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PushOperations.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthenticated
            ///
            /// - Remark: Generated from `#/paths//operations/push/post(pushOperations)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.PushOperations.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.PushOperations.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/operations/push/POST/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/operations/push/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PushOperations.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PushOperations.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Collision - different operations with same id.
            ///
            /// - Remark: Generated from `#/paths//operations/push/post(pushOperations)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.PushOperations.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.PushOperations.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/operations/push/POST/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/operations/push/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PushOperations.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PushOperations.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Something went wrong.
            ///
            /// - Remark: Generated from `#/paths//operations/push/post(pushOperations)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.PushOperations.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.PushOperations.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /operations/confirm`.
    /// - Remark: Generated from `#/paths//operations/confirm/post(confirmOperations)`.
    public enum ConfirmOperations {
        public static let id: Swift.String = "confirmOperations"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/operations/confirm/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConfirmOperations.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConfirmOperations.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConfirmOperations.Input.Headers
            /// - Remark: Generated from `#/paths/operations/confirm/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/operations/confirm/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/operations/confirm/POST/requestBody/json/ids`.
                    public var ids: [Swift.String]
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - ids:
                    public init(ids: [Swift.String]) {
                        self.ids = ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case ids
                    }
                }
                /// - Remark: Generated from `#/paths/operations/confirm/POST/requestBody/content/application\/json`.
                case json(Operations.ConfirmOperations.Input.Body.JsonPayload)
            }
            public var body: Operations.ConfirmOperations.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConfirmOperations.Input.Headers = .init(),
                body: Operations.ConfirmOperations.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/operations/confirm/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/operations/confirm/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/operations/confirm/POST/responses/200/content/json/response`.
                        public var response: Components.Schemas.Empty
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - response:
                        public init(response: Components.Schemas.Empty) {
                            self.response = response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case response
                        }
                    }
                    /// - Remark: Generated from `#/paths/operations/confirm/POST/responses/200/content/application\/json`.
                    case json(Operations.ConfirmOperations.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.ConfirmOperations.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConfirmOperations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConfirmOperations.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Operation list has been confirmed.
            ///
            /// - Remark: Generated from `#/paths//operations/confirm/post(confirmOperations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConfirmOperations.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConfirmOperations.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/operations/confirm/POST/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/operations/confirm/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConfirmOperations.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConfirmOperations.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthenticated
            ///
            /// - Remark: Generated from `#/paths//operations/confirm/post(confirmOperations)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.ConfirmOperations.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.ConfirmOperations.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/operations/confirm/POST/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/operations/confirm/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConfirmOperations.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConfirmOperations.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Something went wrong.
            ///
            /// - Remark: Generated from `#/paths//operations/confirm/post(confirmOperations)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ConfirmOperations.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.ConfirmOperations.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
